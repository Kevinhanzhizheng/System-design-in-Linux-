 LAB3pre Work: Processes in an OS Kernel
                     DUE: 9-23-2021
       Answer questions below. Submit a (text-edit) file to TA
	     
1. READ List: Chapter 3: 3.1-3.5

What's a process? (Page 102)___________tasks_______________________________________
	     
Each process is represented by a PROC structure.
Read the PROC structure in 3.4.1 on Page 111 and answer the following questions:

What's the meaning of:
   pid, ppid?_________process identifier, parent process identifier____________________________
   status   ?______________change process from stop to ready_______________________
   priority ?___________determin which process get more CPU time abd which process wait for execution at a later__________________________
   event    ?_______________every entry to the kernel OS  occurs as a result of an event______________________
   exitCode ?___is a number returned by a process created by a command line indicating if there was an error or not__________________________________

READ 3.5.2 on Process Family Tree. What are the
   PROC pointers child, sibling, parent used for?_child points to teh first child of a process and sibling points to a listof order childreb of the same parent. For each PROC, uses a parent pointer to point at its parent_____________________________
	     
2. Download samples/LAB3pre/mtx. Run it under Linux.
   MTX is a multitasking system. It simulates process operations in a
   Unix/Linux kernel, which include
              fork, exit, wait, sleep, wakeup, process switching

	     
/*********** A Multitasking System ************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "type.h"    // PROC struct and system constants
	
// global variables:
PROC proc[NPROC], *running, *freeList, *readyQueue, *sleepList; 

running    = pointer to the current running PROC
freeList   = a list of all FREE PROCs
readyQueue = a priority queue of procs that are READY to run
sleepList  = a list of SLEEP procs, if any.

Run mtx. It first initialize the system, creates an initial process P0.
P0 has the lowest priotiry 0, all other processes have priority 1

Ater initialization,
     P0 forks a child prcoess P1, switch process to run P1.

                The display looks like the following
-----------------------------------------------------------------------------
Welcome to KCW's Multitasking System
1. init system
freeList = [0 0]->[1 0]->[2 0]->[3 0]->[4 0]->[5 0]->[6 0]->[7 0]->[8 0]->NULL

2. create initial process P0
init complete: P0 running

3. P0 fork P1 : enter P1 into readyQueue
	     
4. P0 switch process to run P1
   P0: switch task
   proc 0 in scheduler()
   readyQueue = [1 1]->[0 0]->NULL
   next running = 1
   proc 1 resume to body()

proc 1 running: Parent=0 childList = NULL
freeList  = [2 0]->[3 0]->[4 0]->[5 0]->[6 0]->[7 0]->[8 0]->NULL
readQueue = [0 0]->NULL
sleepList = NULL
input a command: [ps|fork|switch|exit|sleep|wakeup|wait] : 
----------------------------------------------------------------------------
5.                     COMMANDS:
ps     : display procs with pid, ppid, status; same as ps in Unix/Linux
fork   : READ kfork()   on Page 109: What does it do?__creates a child task and enters it into  the readyQueue________________________
switch : READ tswitch() on Page 108: What does it do?__implement process context switching______________________
exit   : READ kexit()   on Page 112: What does it do?___when a  process terminates____________________
         
sleep  : READ ksleep()  on Page 111: What does it do?___let a process go to sleep_______________________
wakeup : READ kwakeup() on Page 112: What does it do?__wake up all the process sleeping on the event value________________________
	     
wait   : READ kwait()   on Page 114: What does it do?___release the ZOMBIE child PROC back to the freeList for reuse________________________
---------------------------------------------------------------------------

------------------------ TEST REQUIREMENTS ---------------------------------
6. Step 1: test fork
While P1 running, enter fork: What happens?__remove an element in freelist, then add an element to  readQueue________________________

Enter fork many times; 
      How many times can P1 fork? ________7 times, because only have 7 elements in freelist__________________

Enter Control-c to end the program run.


7. Step 2: Test sleep/wakeup
Run mtx again.
While P1 running, fork a child P2;
Switch to run P2. Where did P1 go?__P1 stop, because P2 is running, they would not running together_______________________________________

P2 running : Enter sleep, with a value, e.g.123 to let P2 SLEEP.
What happens?_______P2 stop________________WHY?_______the proc 2 is scheduler(), the process is in sleep status_______________________________

Now, P1 should be running. Enter wakeup with a value, e.g. 234
Did any proc wake up?________nothing happend _____________ WHY? _________it is not the correct value___________________

P1: Enter wakeup with 123
What happens?______proc 2 wakeup__________________________WHY? ____because enter correct value______________________


8. Step 3: test child exit/parent wait
	     
When a proc dies (exit) with a value, it becomes a ZOMBIE, wakeup its parent.
Parent may issue wait to wait for a ZOMBIE child, and frees the ZOMBIE

Run mtx;
P1: enter wait; What happens?__p1 wait for zombine child______________ WHY?___find a zombine child and bury him______________

CASE 1: child exit first, parent wait later

P1: fork a child P2, switch to P2.
P2: enter exit, with a value, e.g. 123 ==> P2 will die with exitCode=123.
Which process runs now?________P3_______________ WHY?___p1 is sleep, and p2  exit, so p3 is resume _________________
enter ps to see the proc status: P2 status = ? _______wait____________________

(P1 still running) enter wait; What happens?____________P1___wait________________
                   enter ps;   What happened to P2?______running____________________

CASE 2: parent wait first, child exit later

P1: enter fork to fork a child P3
P1: enter wait;  What happens to P1?_________p1 wait for zombie___child__________ WHY?______________
P3: Enter exit with a value; What happens?_______p3 exit_____________WHY?_______________find a zombie child and bury him
P1: enter ps;  What's the status of P3?____exit_____________ WHY? ________p3 is sleelp_________
	     
9. Step 4: test Orphans
	     
When a process with children dies first, all its children become orphans.
In Unix/Linux, every process (except P0) MUST have a unique parent.
So, all orphans become P1's children. Hence P1 never dies.

Run mtx again.
P1: fork child P2, Switch to P2.
P2: fork several children of its own, e.g. P3, P4, P5 (all in its childList).
P2: exit with a value. 
P1 should be running WHY?__________never die _________________________________________
P1: enter ps to see proc status: which proc is ZOMBIE?_______P2_______________
What happened to P2's children? ___________P2 is going to be__buried_________________________
P1: enter wait; What happens? ________wait for a zombie child________________________________________
P1: enter wait again; What happens?_____wait for zombie child_____________ WHY?_________because the zombie child not be buried_________

How to let P1 READY to run again?__________wakeup_______________________________



 